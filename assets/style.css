:root {
    --ab-by: 4;
    --or-by: 4.5;
}

* {
    margin: 0;
    padding: 0;
}

body {
    width: 100%;
    /* background-image: linear-gradient(to bottom, rgba(7, 2, 14, 0.934), #200c42 94%); */
    background: black;
}

.full-height {
    height: 100vh;
}

@supports (-webkit-touch-callout: none) {
    .full-height {
        height: -webkit-fill-available;
    }
}

.nav {
    background: rgba(0, 0, 0, 0.588);
    padding: 1rem;
    border-radius: 1rem;
}

.nav ul li {
    cursor: pointer;
    margin: 1rem 0;
    text-transform: uppercase;
}

.nav ul li:hover {
    color: rgba(255, 255, 255, 0.741);
}

.section.home-second {
    z-index: 15;
    overflow: hidden;
}

.section {
    width: 100%;
    position: relative;
}

.position-absolute {
    z-index: 10;
    position: absolute;
    top: 0%;
    bottom: 0%;
    left: 0%;
    right: 0%;
}

.wembed:before, .wembed:after {
    content: " ";
    grid-area: 1 / 1 / 2 / 2;
    display: table;
}

.wembed:after {
    clear: both;
}

.wembed:before, .wembed:after {
    content: " ";
    grid-area: 1 / 1 / 2 / 2;
    display: table;
}

.z-index-0 {
    z-index: 0;
}

.z-index-5 {
    z-index: 5;
}

.position-relative {
    z-index: 10;
    position: relative;
}

.particle-pen {
    width: 100vw;
    height: 100%;
    position: absolute;
    top: 50%;
    left: 50%;
    translate: -50% -50%;
}

.particle {
    fill: white;
    width: calc(var(--size, 0.25) * 1rem);
    aspect-ratio: 1;
    position: absolute;
    top: calc(var(--y) * 1%);
    left: calc(var(--x) * 1%);
    opacity: var(--alpha, 1);
    -webkit-animation: float-out calc(var(--duration, 1) * 1s) calc(var(--delay) * -1s) infinite linear;
    animation: float-out calc(var(--duration, 1) * 1s) calc(var(--delay) * -1s) infinite linear;
    transform-origin: var(--origin-x, 1000%) var(--origin-y, 1000%);
    z-index: -1;
    -webkit-animation-play-state: var(--play-state, running);
    animation-play-state: var(--play-state, running);
}

.particle path {
    fill: hsl(0 0% 90%);
    stroke: none;
}

.particle:nth-of-type(even) {
    animation-direction: reverse;
}

@-webkit-keyframes float-out {
    to {
        rotate: 360deg;
    }
}

@keyframes float-out {
    to {
        rotate: 360deg;
    }
}

.horo {
    transition: all 0.5s ease-in-out;
    animation: horo 0.5s;
    animation: horoHover 0.5s 2;
    -webkit-transform: scale(1);
    -moz-transform: scale(1);
    transform: scale(1);
}

@keyframes horo {
    from {
        -webkit-transform: scale(0);
        -moz-transform: scale(0);
        transform: scale(0);
    }

    to {
        -webkit-transform: scale(1);
        -moz-transform: scale(1);
        transform: scale(1);
    }
}

@keyframes horoHover {
    from {
        -webkit-transform: rotate(0deg);
        -moz-transform: rotate(0deg);
        transform: rotate(0deg);
    }

    to {
        -webkit-transform: rotate(180deg);
        -moz-transform: rotate(180deg);
        transform: rotate(180deg);
    }
}

.content-container {
    background: url('./img/mercure.jpeg');
    background-position: center;
    background-repeat: no-repeat;
    background-size: cover;
}

.box {
    width: 20vh;
    height: 20vh;
    background: rgb(0, 0, 0);
    position: absolute;
    z-index: 100;
    display: flex;
    justify-content: center;
    align-items: center;
    border-radius: 0.5rem;
    overflow: hidden;
    transform: translate(calc(var(--ab)/var(--ab-by)), calc(var(--or)/var(--or-by)));
    -webkit-transform: translate(calc(var(--ab)/var(--ab-by)), calc(var(--or)/var(--or-by)));
    -moz-transform: translate(calc(var(--ab)/var(--ab-by)), calc(var(--or)/var(--or-by)));
    -ms-transform: translate(calc(var(--ab)/var(--ab-by)), calc(var(--or)/var(--or-by)));
    -o-transform: translate(calc(var(--ab)/var(--ab-by)), calc(var(--or)/var(--or-by)));
    animation: boxAnim 0.4s;
}

@keyframes boxAnim {
    from {
        transform: translate(0, 0);
    }

    to {
        transform: translate(calc(var(--ab)/var(--ab-by)), calc(var(--or)/var(--or-by)));
        -webkit-transform: translate(calc(var(--ab)/var(--ab-by)), calc(var(--or)/var(--or-by)));
        -moz-transform: translate(calc(var(--ab)/var(--ab-by)), calc(var(--or)/var(--or-by)));
        -ms-transform: translate(calc(var(--ab)/var(--ab-by)), calc(var(--or)/var(--or-by)));
        -o-transform: translate(calc(var(--ab)/var(--ab-by)), calc(var(--or)/var(--or-by)));
    }
}

.horoHover {
    transition: all 0.5s ease-in-out;
    animation: horoHover2 0.5s 1;
}

@keyframes horoHover2 {
    from {
        -webkit-transform: rotate(0deg);
        -moz-transform: rotate(0deg);
        transform: rotate(0deg);
    }

    to {
        -webkit-transform: rotate(180deg);
        -moz-transform: rotate(180deg);
        transform: rotate(180deg);
    }
}

.view1 {
    transform: translate(0, 0);
    animation: view1 0.4s;
}

@keyframes view1 {
    from {
        transform: translate(calc(var(--ab)/var(--ab-by)), calc(var(--or)/var(--or-by)));
        -webkit-transform: translate(calc(var(--ab)/var(--ab-by)), calc(var(--or)/var(--or-by)));
        -moz-transform: translate(calc(var(--ab)/var(--ab-by)), calc(var(--or)/var(--or-by)));
        -ms-transform: translate(calc(var(--ab)/var(--ab-by)), calc(var(--or)/var(--or-by)));
        -o-transform: translate(calc(var(--ab)/var(--ab-by)), calc(var(--or)/var(--or-by)));
    }

    to {
        transform: translate(0, 0);
    }
}

.show {
    transition: all 0.5s ease-in-out;
    transform: scale(1) translate(-100vw, 0);
}

.hide {
    transition: all 0.5s ease-in-out;
    transform: scale(0) translate(100vw, 0);
}

.describePlanet {
    padding: 1rem;
    overflow-x: hidden;
    overflow-y: scrol;
}

/* Largeur de la barre de défilement */
.describePlanet::-webkit-scrollbar {
    width: 12px;
}

/* Couleur de fond de la barre de défilement */
.describePlanet::-webkit-scrollbar-track {
    background: #f1f1f1;
    border-radius: 0.5rem;
}

/* Couleur de remplissage de la barre de défilement */
.describePlanet::-webkit-scrollbar-thumb {
    background: #888;
    border-radius: 0.5rem;
}

/* Survol de la barre de défilement */
.describePlanet::-webkit-scrollbar-thumb:hover {
    background: #555;
    border-radius: 0.5rem;
}

.describePlanet li {
    margin: 0.8rem 0;
}

.loader-container {
    width: 100%;
    position: fixed;
    top: 0;
    left: 0;
    z-index: 999999999999;
}

.loader-content {
    width: 100%;
    height: 100%;
    background-color: rgb(0 0 0);
    backdrop-filter: blur(4px);
    display: flex;
    align-items: center;
    justify-content: center;
}

.loader-content-image {
    display: flex;
    align-items: center;
    justify-content: center;
    position: absolute;
}

.loader-content-image img {
    width: 22rem;
    height: 22rem;
    object-fit: contain;
}

.flex-element {
    display: flex;
    align-items: center;
    justify-content: center;
}

.loader {
    width: 48px;
    height: 48px;
    border-radius: 50%;
    position: relative;
    animation: rotate 1s linear infinite
}

.loader::before, .loader::after {
    content: "";
    box-sizing: border-box;
    position: absolute;
    inset: 0px;
    border-radius: 50%;
    border: 5px solid #FFF;
    animation: prixClipFix 2s linear infinite;
    -webkit-animation: prixClipFix 2s linear infinite;
}

.loader::after {
    border-color: #278cb4;
    animation: prixClipFix 2s linear infinite, rotate_ 0.5s linear infinite reverse;
    inset: 6px;
    -webkit-animation: prixClipFix 2s linear infinite, rotate_ 0.5s linear infinite reverse;
}

@keyframes rotate_ {
    0% {
        transform: rotate(0deg)
    }

    100% {
        transform: rotate(360deg)
    }
}

@keyframes prixClipFix {
    0% {
        clip-path: polygon(50% 50%, 0 0, 0 0, 0 0, 0 0, 0 0)
    }

    25% {
        clip-path: polygon(50% 50%, 0 0, 100% 0, 100% 0, 100% 0, 100% 0)
    }

    50% {
        clip-path: polygon(50% 50%, 0 0, 100% 0, 100% 100%, 100% 100%, 100% 100%)
    }

    75% {
        clip-path: polygon(50% 50%, 0 0, 100% 0, 100% 100%, 0 100%, 0 100%)
    }

    100% {
        clip-path: polygon(50% 50%, 0 0, 100% 0, 100% 100%, 0 100%, 0 0)
    }
}

@media (min-width: 1024px) {
    :root {
        --ab-by: 8;
        --or-by: 4.5;
    }
}